# -*- coding: utf-8 -*-
"""Copy of classification-gi-gl-level.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yDloE9mNmwCnqkIsoB9Do-4K7Z-ufN0k
"""

import pandas as pd
import numpy as np
import tensorflow as tf
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler

data = pd.read_csv("https://raw.githubusercontent.com/Glucofy-Team/Glucofy-Machine-Learning/main/data/(modified)%20nutrition%20food%20dataset.csv")

data.head()

def categorize_gi_new(gi):
    if gi <= 50:
        return 'Low'
    elif gi <= 70:
        return 'Medium'
    else:
        return 'High'

# Fungsi untuk mengkategorikan glycemic load dengan threshold baru
def categorize_gl_new(gl):
    if gl <= 9:
        return 'Low'
    elif gl <= 19:
        return 'Medium'
    else:
        return 'High'

# Buat kolom kategori untuk glycemic index dan glycemic load dengan threshold baru
data['gi_category'] = data['glycemic_index'].apply(categorize_gi_new)
data['gl_category'] = data['glycemic_load'].apply(categorize_gl_new)

# Tampilkan hasil
#print(data[['glycemic_index', 'gi_category', 'glycemic_load', 'gl_category']].head())

# split feaute
X = data[['glycemic_index', 'glycemic_load']]
y_gi = data['gi_category']
y_gl = data['gl_category']

# encode
label_encoder_gi = LabelEncoder()
y_gi_encoded = label_encoder_gi.fit_transform(y_gi)

label_encoder_gl = LabelEncoder()
y_gl_encoded = label_encoder_gl.fit_transform(y_gl)

# split data
X_train, X_test, y_gi_train, y_gi_test = train_test_split(X, y_gi_encoded, test_size=0.2, random_state=42)
X_train, X_test, y_gl_train, y_gl_test = train_test_split(X, y_gl_encoded, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Model glycemic index
model_gi = Sequential([
    Dense(128, activation='relu', input_shape=(2,)),
    Dense(64, activation='relu'),
    Dense(3, activation='softmax')
])

model_gi.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
model_gi.fit(X_train, y_gi_train, epochs=50, batch_size=32, validation_split=0.2)

# evaluate model
gi_loss, gi_accuracy = model_gi.evaluate(X_test, y_gi_test)
#print(f"Glycemic Index Model Accuracy: {gi_accuracy * 100:.2f}%")

# Model glycemic load
model_gl = Sequential([
    Dense(128, activation='relu', input_shape=(2,)),
    Dense(64, activation='relu'),
    Dense(3, activation='softmax')
])

model_gl.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
model_gl.fit(X_train, y_gl_train, epochs=50, batch_size=32, validation_split=0.2)

# evaluate model
gl_loss, gl_accuracy = model_gl.evaluate(X_test, y_gl_test)
#print(f"Glycemic Load Model Accuracy: {gl_accuracy * 100:.2f}%")

from sklearn.metrics import classification_report

# Prediksi dan evaluasi untuk glycemic index
y_gi_pred = model_gi.predict(X_test)
y_gi_pred_classes = y_gi_pred.argmax(axis=1)
#print("Classification Report for Glycemic Index:")
print(classification_report(y_gi_test, y_gi_pred_classes, target_names=label_encoder_gi.classes_))

# Prediksi dan evaluasi untuk glycemic load
y_gl_pred = model_gl.predict(X_test)
y_gl_pred_classes = y_gl_pred.argmax(axis=1)
#print("Classification Report for Glycemic Load:")
print(classification_report(y_gl_test, y_gl_pred_classes, target_names=label_encoder_gl.classes_))

def generate_gi_classification_report():
    y_gi_pred = model_gi.predict(X_test)
    y_gi_pred_classes = y_gi_pred.argmax(axis=1)
    report = classification_report(y_gi_test, y_gi_pred_classes, target_names=label_encoder_gi.classes_, output_dict=True)
    return report

def generate_gl_classification_report():
    y_gl_pred = model_gl.predict(X_test)
    y_gl_pred_classes = y_gl_pred.argmax(axis=1)
    report = classification_report(y_gl_test, y_gl_pred_classes, target_names=label_encoder_gl.classes_, output_dict=True)
    return report